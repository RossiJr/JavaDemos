package org.rossijr.basiccrud.model;

import jakarta.persistence.*;

import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.List;


/**
 * Represents a project entity in the system.
 * <ul>
 * <li>The annotation {@code @Entity} indicates that this class is a JPA entity (which means it will be mapped to a database table).</li>
 * <li>The annotation {@code @Table} specifies the name of the table in the database where the entity will be stored.</li>
 * </ul>
 */
@Entity
@Table(name = "tb_project")
public class Project implements Serializable {

    /**
     * ID as unique identifier for the project.
     * <ul>
     * <li>The annotation {@code @Id} indicates that this field is the primary key of the entity.</li>
     * <li>The annotation {@code @GeneratedValue(strategy = GenerationType.IDENTITY)} specifies that the ID will be automatically generated by the database, in a sequential manner.</li>
     * <li>The annotation {@code @Column(name = "ID")} specifies the name of the column in the database table where this attribute will be stored.</li>
     * </ul>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    private Long id;

    /**
     * <ul>
     * <li>{@code @Column(nullable = false, length = 100, name = "NAME")}:</li>
     * <ul>
     * <li>{@code nullable = false}: Ensures this field cannot be null in the database.</li>
     * <li>{@code length = 100}: Limits the maximum length of the field to 100 characters.</li>
     * <li>{@code name = "NAME"}: Specifies the name of the column in the database table as "NAME".</li>
     * </ul>
     * </ul>
     */
    @Column(nullable = false, length = 100, name = "NAME")
    private String name;

    /**
     * <ul>
     * <li>{@code @Column(length = 255, name = "DESCRIPTION")}:</li>
     * <ul>
     * <li>{@code length = 255}: Limits the maximum length of the field to 255 characters.</li>
     * <li>{@code name = "DESCRIPTION"}: Specifies the name of the column in the database table as "DESCRIPTION".</li>
     * </ul>
     * </ul>
     */
    @Column(length = 255, name = "DESCRIPTION")
    private String description;

    /**
     * <ul>
     * <li>{@code @Column(columnDefinition = "TIMESTAMP WITH TIME ZONE", name = "CREATED_AT")}:</li>
     * <ul>
     * <li>{@code columnDefinition = "TIMESTAMP WITH TIME ZONE"}: Specifies that the column in the database table will store the date and time along with the time zone.</li>
     * <li>{@code name = "CREATED_AT"}: Specifies the name of the column in the database table as "CREATED_AT".</li>
     * </ul>
     * </ul>
     *
     * <p>Consider the best option for your needs, as the {@link ZonedDateTime} demands more space in the database compared to options that do not store the time zone.</p>
     */
    @Column(columnDefinition = "TIMESTAMP WITH TIME ZONE", name = "CREATED_AT")
    private ZonedDateTime createdAt;

    /**
     * <ul>
     * <li>{@code @OneToMany(mappedBy = "project", cascade = CascadeType.ALL)}:</li>
     * <ul>
     * <li>{@code mappedBy = "project"}: Indicates that the {@code project} field in the {@link Task} entity owns the relationship.</li>
     * <li>{@code cascade = CascadeType.ALL}: Ensures that any operations performed on a project will cascade to its associated tasks.</li>
     * </ul>
     * </ul>
     */
    @OneToMany(mappedBy = "project", cascade = CascadeType.ALL)
    private List<Task> tasks;

    public Project(Long id) {
        this.id = id;
    }

    public Project() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public ZonedDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(ZonedDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public List<Task> getTasks() {
        return tasks;
    }

    public void setTasks(List<Task> tasks) {
        this.tasks = tasks;
    }
}
